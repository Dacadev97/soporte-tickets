# ==============================================================================
# LARAVEL APPLICATION DEPLOYMENT - Despliegue de la aplicaci√≥n web
# ==============================================================================
#
# Este deployment gestiona la aplicaci√≥n Laravel que hemos containerizado.
# A diferencia de la base de datos, la aplicaci√≥n web puede escalarse
# horizontalmente sin problemas, por lo que podemos tener m√∫ltiples r√©plicas.
#
# Caracter√≠sticas importantes para aplicaciones web en Kubernetes:
# - Rolling updates para despliegues sin downtime
# - Health checks para asegurar que la aplicaci√≥n responde correctamente
# - Configuraci√≥n mediante ConfigMaps y Secrets
# - Escalabilidad horizontal
# - Resource limits para uso eficiente de recursos

apiVersion: apps/v1
kind: Deployment
metadata:
  name: laravel-deployment               # Nombre del deployment
  namespace: soporte-tickets             # Namespace donde se despliega
  labels:
    app: soporte-tickets
    component: backend
    tier: application
  annotations:
    description: "Deployment de la aplicaci√≥n Laravel de tickets"
spec:
  # N√∫mero de r√©plicas - para aplicaciones web podemos tener varias
  replicas: 2                           # 2 r√©plicas para alta disponibilidad
  
  # Estrategia de actualizaci√≥n
  strategy:
    type: RollingUpdate                 # Actualizaci√≥n sin downtime
    rollingUpdate:
      maxSurge: 1                       # 1 pod adicional durante actualizaci√≥n
      maxUnavailable: 1                 # M√°ximo 1 pod no disponible durante actualizaci√≥n
  
  # Selector para identificar los pods gestionados
  selector:
    matchLabels:
      app: soporte-tickets
      component: backend
      tier: application
  
  # Template de los pods
  template:
    metadata:
      labels:
        app: soporte-tickets
        component: backend
        tier: application
        version: "1.0"
      annotations:
        description: "Pod de la aplicaci√≥n Laravel"
    spec:
      # Init containers se ejecutan antes que los contenedores principales
      # √ötiles para tareas de inicializaci√≥n como migraciones de DB
      initContainers:
      - name: laravel-init
        image: dacadev/soporte-tickets:latest  # Usar la misma imagen
        imagePullPolicy: IfNotPresent
        
        # Comando de inicializaci√≥n
        command: ["/bin/bash"]
        args:
        - -c
        - |
          set -e
          echo "üîß Inicializando aplicaci√≥n Laravel..."
          
          # Esperar a que MySQL est√© disponible
          echo "‚è≥ Esperando a MySQL..."
          until php -r "try { new PDO('mysql:host=mysql-service;port=3306', 'laravel_user', 'laravel_secure_2024!'); echo 'MySQL disponible\n'; exit(0); } catch(Exception \$e) { exit(1); }"; do
            echo "MySQL no disponible, esperando..."
            sleep 3
          done
          echo "‚úÖ MySQL disponible"
          
          # Instalar dependencias de Composer
          echo "üì¶ Instalando dependencias..."
          composer install --no-interaction --prefer-dist --optimize-autoloader
          
          # Crear directorios necesarios
          mkdir -p /var/www/html/storage/{app,framework,logs}
          mkdir -p /var/www/html/storage/framework/{cache,sessions,testing,views}
          mkdir -p /var/www/html/bootstrap/cache
          
          # Configurar permisos
          chown -R www-data:www-data /var/www/html/storage
          chown -R www-data:www-data /var/www/html/bootstrap/cache
          chmod -R 775 /var/www/html/storage
          chmod -R 775 /var/www/html/bootstrap/cache
          
          # Generar clave de aplicaci√≥n si no existe
          echo "üîë Generando clave de aplicaci√≥n..."
          php artisan key:generate --force --no-interaction || echo "Clave ya existe"
          
          # Ejecutar migraciones
          echo "üóÉÔ∏è Ejecutando migraciones..."
          php artisan migrate --force
          
          # Seeders en desarrollo (comentar en producci√≥n)
          echo "üå± Ejecutando seeders..."
          php artisan db:seed --force || echo "Seeders no ejecutados (puede ser normal)"
          
          echo "‚úÖ Inicializaci√≥n completada"
        
        # Variables de entorno desde ConfigMap y Secrets
        envFrom:
        - configMapRef:
            name: laravel-config
        - secretRef:
            name: laravel-secrets
        
        # Montaje de vol√∫menes
        volumeMounts:
        - name: laravel-storage
          mountPath: /var/www/html/storage
        - name: composer-cache
          mountPath: /var/www/html/vendor
        
        # Recursos limitados para init container
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
      
      # Contenedor principal de la aplicaci√≥n
      containers:
      - name: laravel-app
        image: dacadev/soporte-tickets:latest  # Imagen creada desde nuestro Dockerfile
        imagePullPolicy: IfNotPresent
        
        # Puerto expuesto (Apache en puerto 80)
        ports:
        - containerPort: 80
          name: http
          protocol: TCP
        
        # Variables de entorno desde ConfigMap y Secrets
        envFrom:
        - configMapRef:
            name: laravel-config          # Configuraci√≥n no sensible
        - secretRef:
            name: laravel-secrets         # Datos sensibles
        
        # Variables de entorno adicionales espec√≠ficas
        env:
        - name: APACHE_RUN_USER
          value: "www-data"
        - name: APACHE_RUN_GROUP
          value: "www-data"
        
        # Montaje de vol√∫menes
        volumeMounts:
        - name: laravel-storage
          mountPath: /var/www/html/storage    # Directorio de storage de Laravel
        - name: composer-cache
          mountPath: /var/www/html/vendor    # Dependencias de Composer
        
        # Configuraci√≥n de recursos
        resources:
          requests:
            memory: "256Mi"               # Memoria m√≠nima
            cpu: "250m"                   # 0.25 CPU cores m√≠nimos
          limits:
            memory: "512Mi"               # Memoria m√°xima
            cpu: "500m"                   # 0.5 CPU cores m√°ximos
        
        # Health checks para la aplicaci√≥n web
        # Readiness probe: cu√°ndo el pod est√° listo para recibir tr√°fico
        readinessProbe:
          httpGet:
            path: /                       # Endpoint para verificar salud
            port: http
            scheme: HTTP
          initialDelaySeconds: 15         # Esperar 15s despu√©s de inicio
          periodSeconds: 10               # Verificar cada 10s
          timeoutSeconds: 5               # Timeout de 5s
          successThreshold: 1             # 1 √©xito para marcar como ready
          failureThreshold: 3             # 3 fallos para marcar como not ready
        
        # Liveness probe: cu√°ndo reiniciar el contenedor
        livenessProbe:
          httpGet:
            path: /                       # Mismo endpoint
            port: http
            scheme: HTTP
          initialDelaySeconds: 30         # Esperar m√°s para liveness
          periodSeconds: 30               # Verificar cada 30s
          timeoutSeconds: 10              # Timeout m√°s largo
          failureThreshold: 3             # 3 fallos antes de reiniciar
        
        # Startup probe: para aplicaciones que tardan en iniciar
        startupProbe:
          httpGet:
            path: /
            port: http
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 12            # 60s total de startup time
        
        # Configuraci√≥n de seguridad
        securityContext:
          runAsUser: 33                   # Usuario www-data
          runAsGroup: 33                  # Grupo www-data
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false   # Laravel necesita escribir archivos
          capabilities:
            drop:
            - ALL
            add:
            - CHOWN
            - DAC_OVERRIDE
            - SETGID
            - SETUID
      
      # Definici√≥n de vol√∫menes
      volumes:
      - name: laravel-storage
        persistentVolumeClaim:
          claimName: laravel-storage-pvc  # PVC para archivos de Laravel
      - name: composer-cache
        emptyDir: {}  # Volumen temporal para dependencias de Composer
      
      # Configuraci√≥n del pod
      restartPolicy: Always
      dnsPolicy: ClusterFirst
      
      # Configuraci√≥n de seguridad a nivel de pod
      securityContext:
        fsGroup: 33                       # Grupo www-data para acceso a vol√∫menes
        runAsNonRoot: false               # Apache necesita algunos privilegios
      
      # Tolerations y affinity (opcional para Minikube)
      # En producci√≥n se pueden usar para control de placement
      affinity:
        podAntiAffinity:                  # Evitar que 2 pods est√©n en el mismo nodo
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: component
                  operator: In
                  values:
                  - backend
              topologyKey: kubernetes.io/hostname

---
# ==============================================================================
# LARAVEL SERVICE - Exposici√≥n de la aplicaci√≥n dentro del cluster
# ==============================================================================
#
# Este service expone la aplicaci√≥n Laravel dentro del cluster.
# Otros pods pueden acceder a la aplicaci√≥n usando el nombre del service.
# El service tambi√©n proporciona balanceo de carga entre las r√©plicas.

apiVersion: v1
kind: Service
metadata:
  name: laravel-service                  # Nombre del service
  namespace: soporte-tickets             # Namespace donde se crea
  labels:
    app: soporte-tickets
    component: backend
    tier: application
  annotations:
    description: "Service para la aplicaci√≥n Laravel"
spec:
  # Tipo ClusterIP para acceso interno (el Ingress se encargar√° del acceso externo)
  type: ClusterIP
  
  # Selector para identificar los pods backend
  selector:
    app: soporte-tickets
    component: backend
    tier: application
  
  # Puertos expuestos
  ports:
  - name: http                           # Nombre del puerto
    port: 80                             # Puerto del service
    targetPort: http                     # Puerto en el contenedor (nombre definido en el pod)
    protocol: TCP
  
  # Configuraci√≥n de sesi√≥n
  # Para aplicaciones web stateless, None es apropiado
  # Para aplicaciones que requieren sticky sessions, usar ClientIP
  sessionAffinity: None

---
# ==============================================================================
# HORIZONTAL POD AUTOSCALER (HPA) - Escalado autom√°tico basado en m√©tricas
# ==============================================================================
#
# El HPA escala autom√°ticamente el n√∫mero de r√©plicas en un deployment
# bas√°ndose en m√©tricas como CPU, memoria, o m√©tricas personalizadas.
#
# Requisitos:
# - Metrics server debe estar instalado en el cluster
# - Los pods deben tener resource requests definidos
#
# NOTA: En Minikube necesitas habilitar el addon de metrics:
# minikube addons enable metrics-server

apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: laravel-hpa
  namespace: soporte-tickets
  labels:
    app: soporte-tickets
    component: backend
    tier: application
  annotations:
    description: "Autoscaler para la aplicaci√≥n Laravel basado en CPU"
spec:
  # Deployment objetivo para el escalado
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: laravel-deployment
  
  # Rango de r√©plicas
  minReplicas: 2                         # M√≠nimo 2 r√©plicas
  maxReplicas: 5                         # M√°ximo 5 r√©plicas
  
  # M√©tricas para el escalado
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70           # Escalar cuando CPU promedio > 70%
  
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80           # Escalar cuando memoria promedio > 80%
  
  # Comportamiento del escalado
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300    # Esperar 5 min antes de scale down
      policies:
      - type: Percent
        value: 50                        # Reducir m√°ximo 50% de pods por vez
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60     # Esperar 1 min antes de scale up
      policies:
      - type: Percent
        value: 100                       # Aumentar m√°ximo 100% de pods por vez
        periodSeconds: 60
