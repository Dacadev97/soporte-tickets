# ==============================================================================
# SECRET - Almacenamiento seguro de información sensible
# ==============================================================================
#
# Un Secret es similar a ConfigMap pero está específicamente diseñado para
# almacenar información sensible como contraseñas, tokens OAuth, claves SSH, etc.
# Los datos en un Secret están codificados en base64 y Kubernetes proporciona
# medidas adicionales de seguridad.
#
# ¿Por qué usar Secret en lugar de ConfigMap?
# - Seguridad: Los datos están codificados y pueden ser cifrados en etcd
# - Acceso restringido: Puede limitarse qué pods pueden acceder a qué secrets
# - Auditoria: Kubernetes puede auditar el acceso a secrets
# - Mejores prácticas: Separar datos sensibles de configuración general
#
# Tipos de Secret:
# - Opaque: datos arbitrarios definidos por el usuario (este caso)
# - kubernetes.io/dockerconfigjson: credenciales de registro Docker
# - kubernetes.io/tls: certificados TLS
#
# IMPORTANTE: Los valores deben estar codificados en base64
# Para codificar: echo -n "mi-password" | base64
# Para decodificar: echo "bWktcGFzc3dvcmQ=" | base64 -d

apiVersion: v1
kind: Secret
metadata:
  name: laravel-secrets                   # Nombre del Secret
  namespace: soporte-tickets              # Namespace donde se crea
  labels:
    app: soporte-tickets
    component: secrets
    tier: backend
  annotations:
    description: "Datos sensibles de la aplicación Laravel"
type: Opaque                              # Tipo de secret para datos arbitrarios
data:
  # Clave de cifrado de Laravel (APP_KEY)
  # Esta es una clave de ejemplo, en producción debe ser única y segura
  # Generada con: php artisan key:generate --show | base64
  APP_KEY: YmFzZTY0OkpGRGpuVGpLWHV4L2hkVjdWS2dEaElKMy9OTk1sUjhOK1FLWDZGTnhGNDA9

  # Contraseña de la base de datos
  # Valor original: "laravel_secure_2024!"
  # Codificado: echo -n "laravel_secure_2024!" | base64
  DB_PASSWORD: bGFyYXZlbF9zZWN1cmVfMjAyNCE=

  # Contraseña del usuario root de MySQL
  # Valor original: "mysql_root_2024!"
  # Codificado: echo -n "mysql_root_2024!" | base64
  MYSQL_ROOT_PASSWORD: bXlzcWxfcm9vdF8yMDI0IQ==

  # Contraseña del usuario de aplicación de MySQL
  # Valor original: "laravel_secure_2024!"
  # Codificado: echo -n "laravel_secure_2024!" | base64
  MYSQL_PASSWORD: bGFyYXZlbF9zZWN1cmVfMjAyNCE=

---
# ==============================================================================
# SECRET ADICIONAL - Configuración de base de datos MySQL
# ==============================================================================
# Este secret contiene la configuración inicial de MySQL como un archivo
# Esto demuestra cómo usar secrets para montar archivos de configuración

apiVersion: v1
kind: Secret
metadata:
  name: mysql-init-config
  namespace: soporte-tickets
  labels:
    app: soporte-tickets
    component: database
    tier: database
  annotations:
    description: "Script de inicialización de MySQL"
type: Opaque
data:
  # Script SQL de inicialización
  # Este script se ejecutará cuando MySQL se inicie por primera vez
  init.sql: |
    Q1JFQVRFIERBTUFCQVNFIEJGIE5PVCBFWElTVFMgYHNvcG9ydGVfdGlja2V0c2A7CgpDUkVBVEUg
    VVNFUiBJRiBOT1QgRVhJU1RTICdsYXJhdmVsX3VzZXInQCclJyBJREVOVElGSUVEIEJZICdsYXJh
    dmVsX3NlY3VyZV8yMDI0ISc7CgpHUkFOVCBBTEwgUFJJVklMRUdFUyBPTiBgc29wb3J0ZV90aWNr
    ZXRzYC4qIFRPICdsYXJhdmVsX3VzZXInQCclJzsKCkZMVVNIIFBSSVZJTEVHRVM7
