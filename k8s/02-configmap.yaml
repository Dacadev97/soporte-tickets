# ==============================================================================
# CONFIGMAP - Almacenamiento de datos de configuraci√≥n no sensibles
# ==============================================================================
#
# Un ConfigMap permite desacoplar la configuraci√≥n del c√≥digo de la aplicaci√≥n.
# Almacena datos de configuraci√≥n en pares clave-valor que pueden ser consumidos
# por pods como variables de entorno, argumentos de l√≠nea de comandos, o archivos
# de configuraci√≥n.
#
# ¬øPor qu√© usar ConfigMap?
# - Separaci√≥n de configuraci√≥n: La configuraci√≥n vive fuera del contenedor
# - Reutilizaci√≥n: M√∫ltiples pods pueden usar la misma configuraci√≥n
# - Flexibilidad: Cambios de configuraci√≥n sin reconstruir im√°genes
# - Versionado: Control de versiones de la configuraci√≥n
#
# IMPORTANTE: ConfigMaps NO deben usarse para datos sensibles (usar Secrets)

apiVersion: v1
kind: ConfigMap
metadata:
  name: laravel-config                    # Nombre del ConfigMap
  namespace: soporte-tickets              # Namespace donde se crea
  labels:
    app: soporte-tickets
    component: configuration
    tier: backend
  annotations:
    description: "Configuraci√≥n de la aplicaci√≥n Laravel"
data:
  # Variables de entorno de Laravel
  APP_NAME: "Sistema de Tickets de Soporte"
  APP_ENV: "production"                   # Entorno de producci√≥n para K8s
  APP_DEBUG: "false"                      # Debug deshabilitado en producci√≥n
  APP_URL: "http://soporte-tickets.local" # URL base de la aplicaci√≥n
  
  # Configuraci√≥n de base de datos
  DB_CONNECTION: "mysql"                  # Driver de base de datos
  DB_HOST: "mysql-service"                # Nombre del service de MySQL
  DB_PORT: "3306"                         # Puerto est√°ndar de MySQL
  DB_DATABASE: "soporte_tickets"          # Nombre de la base de datos
  DB_USERNAME: "laravel_user"             # Usuario de la base de datos
  
  # Configuraci√≥n de logging
  LOG_CHANNEL: "stderr"                   # Log a stderr para contenedores
  LOG_LEVEL: "info"                       # Nivel de logging en producci√≥n
  
  # Configuraci√≥n de cache y sesi√≥n
  CACHE_DRIVER: "file"                    # Driver de cach√© (file para simplificar)
  SESSION_DRIVER: "file"                  # Driver de sesi√≥n
  SESSION_LIFETIME: "120"                 # Tiempo de vida de sesi√≥n (minutos)
  
  # Configuraci√≥n de broadcasting
  BROADCAST_DRIVER: "log"                 # Driver de broadcasting
  QUEUE_CONNECTION: "sync"                # Driver de colas (sync para simplificar)
  
  # Configuraci√≥n espec√≠fica para contenedores
  # Esta configuraci√≥n optimiza Laravel para ejecutarse en K8s
  config.php: |
    <?php
    // Configuraci√≥n adicional para contenedores
    return [
        'view' => [
            'compiled' => env('VIEW_COMPILED_PATH', '/tmp/views'),
        ],
        'cache' => [
            'stores' => [
                'file' => [
                    'driver' => 'file',
                    'path' => env('CACHE_PATH', '/tmp/cache'),
                ],
            ],
        ],
    ];
  
  # Script de inicializaci√≥n del contenedor
  # Se puede montar como archivo y ejecutar durante el startup
  init-container.sh: |
    #!/bin/bash
    set -e
    echo "üöÄ Iniciando configuraci√≥n de Laravel en Kubernetes..."
    
    # Esperar a que MySQL est√© disponible
    echo "‚è≥ Esperando conexi√≥n a MySQL..."
    until mysqladmin ping -h"$DB_HOST" -u"$DB_USERNAME" -p"$DB_PASSWORD" --silent; do
      echo "MySQL no est√° listo, esperando..."
      sleep 2
    done
    echo "‚úÖ MySQL est√° disponible"
    
    # Crear directorios necesarios
    mkdir -p /tmp/views /tmp/cache /var/www/html/storage/logs
    chmod -R 775 /tmp/views /tmp/cache /var/www/html/storage
    
    # Generar clave de aplicaci√≥n si no existe
    if [ -z "$APP_KEY" ]; then
      echo "üîë Generando clave de aplicaci√≥n..."
      php artisan key:generate --force
    fi
    
    # Ejecutar migraciones
    echo "üóÉÔ∏è Ejecutando migraciones de base de datos..."
    php artisan migrate --force
    
    # Cache de configuraci√≥n para mejor rendimiento
    echo "‚ö° Optimizando aplicaci√≥n..."
    php artisan config:cache
    php artisan route:cache
    php artisan view:cache
    
    echo "üéâ Inicializaci√≥n completada"
